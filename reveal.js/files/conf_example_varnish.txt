=========================== VARNISH ==================================
<svn-admin>/trunk/common/varnish/conf/4.x/*
================== Aplanado por Jere ==================================
	(PUEDE FALTAR ALGO...)

vcl 4.0;
 
backend default {
    .host = "127.0.0.1";
    .port = "6080";
}
 
sub vcl_recv {
    unset req.http.X-Forwarded-For;
    set    req.http.X-Forwarded-For = client.ip;
 
    # Deny access to some Drupal php files
    if (req.url ~ "^/install\.php$|^/update\.php$")
    {
        return(synth(404, "File not found"));
    }
 
    if (req.http.host ~ "\.midominio\.com$")
    {
    # Remove has_js and Google Analytics __* cookies.
    set req.http.Cookie = regsuball(req.http.Cookie, "(^|;\s*)(__[a-z]+|has_js)=[^;]*", "");
    # Remove a ";" prefix, if present.
    set req.http.Cookie = regsub(req.http.Cookie, "^;\s*", "");
    # Remove empty cookies.
    if (req.http.Cookie ~ "^\s*$")
    {
        unset req.http.Cookie;
    }
    # Always cache the following file types for all users.
    if (req.url ~ "(?i)\.(png|gif|jpeg|jpg|ico|swf|css|js|html|htm)(\?[a-z0-9]+)?$")
    {
        unset req.http.Cookie;
    }
    # Normalize the Accept-Encoding header
    # as per: http://varnish-cache.org/wiki/FAQ/Compression
    if (req.http.Accept-Encoding)
    {
        if (req.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg)$")
        {
            # No point in compressing these
            unset req.http.Accept-Encoding;
        }
        elsif (req.http.Accept-Encoding ~ "gzip")
        {
            set req.http.Accept-Encoding = "gzip";
        }
        elsif (req.http.Accept-Encoding ~ "deflate")
        {
            set req.http.Accept-Encoding = "deflate";
        }
        else
        {
            # unkown algorithm
            unset req.http.Accept-Encoding;
        }
    }
    # No varnish for Drupal's cron
    if (req.url == "cron.php")
    {
        return(pass);
    }
    # Cache all requests by default
    if (req.method == "GET" || req.method == "HEAD")
    {
        return(hash);
    }
        }
        return(pass);
    }
}

sub vcl_backend_response {
    # Happens after we have read the response headers from the backend.
    #
    # Here you clean the response headers, removing silly Set-Cookie headers
    # and other mistakes your backend does.
    set beresp.grace = 1h;
    set beresp.http.X-Varnish-Cacheable = "FETCH:status="+beresp.status+":method="+bereq.method+":url="+bereq.url+":ttl="+beresp.ttl;
    if (beresp.ttl > 0s)
    {
        set beresp.http.X-Varnish-Cacheable = beresp.http.X-Varnish-Cacheable+":cacheable=YES";
    }
    else
    {
        set beresp.http.X-Varnish-Cacheable = beresp.http.X-Varnish-Cacheable+":cacheable=NO";
    }
    # https://www.varnish-software.com/static/book/VCL_Basics.html#the-initial-value-of-beresp-ttl
    #
    # If beresp.ttl was set to something below zero (in the past), based on
    # Cache-Control and/or Expires HTTP headers, set it to a valid time so the
    # object is cached.
    #
    if (beresp.ttl <= 0s)
    {
        if (beresp.http.cache-control ~ ".*max-age.*" ||
            beresp.http.cache-control ~ ".*s-maxage.*" ||
            beresp.http.expires == "*")
        {
            set beresp.ttl = 60s;
        }
    }
    # Do not cache redirection responses
    if (beresp.status > 299 && beresp.status < 400)
    {
        set beresp.ttl = 0s;
    }
}

sub vcl_deliver {
    # Happens when we have all the pieces we need, and are about to send the
    # response to the client.
    #
    # You can do accounting or modifying the final object here.
}
